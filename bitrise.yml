format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

title: Template configuration.
summary: |-
  Template 'bitrise.yml', generated by 'bitrise init'.
description: |-
  Configuration (environments) specified in 'app' will be available
    for every workflow.

  The Trigger Map ('trigger_map') defines mapping between trigger patterns
    and workflows.
  You can run workflows directly with bitrise: bitrise run workflow-name
    Or you can 'trigger' a build: bitrise trigger some-pattern

   With this example 'trigger_map' if you 'bitrise trigger test'
    or 'bitrise trigger test-1' or specify any other pattern
    which starts with 'test' then the 'test' workflow will be used.
   In any other case (ex: 'bitrise trigger something-else') the
    workflow called 'fallback' will be used.

  Workflows ('workflows') are where you can define different, separate scenarios,
    which you can then 'bitrise run' or 'bitrise trigger'.

app:
  envs:
  - KEYSTORE_URL:
  - BITRISE_APP_TITLE: "Toggl Time Tracker"
  - BITRISE_DEV_BRANCH: "master"
  - BITRISE_PROJECT_PATH: Mobile.Android.sln
    opts:
      is_expand: false
  - BITRISE_XAMARIN_CONFIGURATION: Release
    opts:
      is_expand: false
  - BITRISE_XAMARIN_PLATFORM: x86
    opts:
      is_expand: false  

trigger_map:
- pattern: android**
  is_pull_request_allowed: true
  workflow: android  
- pattern: sign**
  workflow: sign    
- pattern: "*"
  is_pull_request_allowed: true
  workflow: fallback

workflows:
  android:
    description: |-
        Android release steps
    steps:
    - git-clone@3.1.0: {}
    - nuget-restore@0.9.0: {}
    - xamarin-builder@1.1.3:
        inputs:
        - platform_filter: android
    - script:
        title: Get Unsigned .apk name
        inputs:
        - content: |-
            #!/bin/bash
            match="-Signed"
            signedPath=$BITRISE_APK_PATH
            echo ${signedPath/$match} | envman add --key BITRISE_UNSIGNED_APK_PATH
            rm ${BITRISE_APK_PATH}
            echo "$BITRISE_UNSIGNED_APK_PATH"
        - is_debug: 'yes'               
    - sign-apk@0.9.4:
        inputs:              
        - apk_path: "$BITRISE_UNSIGNED_APK_PATH"
        - keystore_url: $KEYSTORE_URL
        - keystore_password: $KEYSTORE_PASSWORD
        - keystore_alias: $KEYSTORE_ALIAS
        - private_key_password: $PRIVATE_KEY_PASSWORD
    - deploy-to-bitrise-io@1.2.2: {}   
  sign:
    description: |-
        Sign
    steps: 
    - script:
        title: Get Unsigned .apk name
        inputs:
        - content: |-
            #!/bin/bash
            envman add --key BITRISE_UNSIGNED_APK_PATH --value '/Users/anton/Projects/com.toggl.timer.apk'            
            envman run bash -c 'echo "Environment test KEYSTORE_URL: $KEYSTORE_URL"'
            envman run bash -c 'echo "Environment test KEYSTORE_PASSWORD: $KEYSTORE_PASSWORD"'
            envman run bash -c 'echo "Environment test BITRISE_UNSIGNED_APK_PATH: $BITRISE_UNSIGNED_APK_PATH"'
            envman run bash -c 'echo "Environment test KEYSTORE_ALIAS: $KEYSTORE_ALIAS"'
            envman run bash -c 'echo "Environment test PRIVATE_KEY_PASSWORD: $PRIVATE_KEY_PASSWORD"'
            
            file_name=$(basename "${apk_path}")
            dir_name=$(dirname "${apk_path}")
            tmp_signed_apk_path="${dir_name}/tmp_signed-${file_name}"

            jarsigner="/usr/bin/jarsigner"
            "${jarsigner}" \
                -keystore "$KEYSTORE_URL" \
                -storepass "$KEYSTORE_PASSWORD" \
                -keypass "$PRIVATE_KEY_PASSWORD" \
                -signedjar "${tmp_signed_apk_path}" "${BITRISE_UNSIGNED_APK_PATH}" "$KEYSTORE_ALIAS"
                
        - is_debug: 'yes'            
    - sign-apk@0.9.4:
        inputs:              
        - apk_path: "$BITRISE_UNSIGNED_APK_PATH"
        - keystore_url: $KEYSTORE_URL
        - keystore_password: $KEYSTORE_PASSWORD
        - keystore_alias: $KEYSTORE_ALIAS
        - private_key_password: $PRIVATE_KEY_PASSWORD          
  fallback:
    description: |-
      This is a fallback workflow. As defined in the 'trigger_map' section
      this workflow will be selected in any case if you run 'bitrise trigger'
      with any pattern which does not match any other in
      the 'tigger_map' definition. For example 'bitrise trigger my-custom-pattern'
      or 'bitrise trigger my/custom/pattern' will both select this workflow.
    steps:
    - script:
        title: Fallback
        inputs:
        - content: |-
            #!/bin/bash
            echo "This is a the fallback workflow, used"
            echo " if you 'bitrise trigger' a build but the pattern"
            echo " does not match any other pattern in the trigger_map"


            
